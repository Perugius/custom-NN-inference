#include <iostream>
#include <vector>
#include <algorithm>
#include <cmath>
#include "filters.h"
#include "operations.h"

std::vector<float> input = {
0.9996914088215931,1.0,0.9969758064516129,0.9939310401579987,0.9878620803159973,0.9909068466096116,0.9936224489795918,0.9969758064516129,0.9757241606319947,0.9757241606319947,0.8914170506912442,0.8341013824884793,0.7831221198156681,0.6955027978933509,0.6533492429229757,0.6354303818301514,0.575357965766952,0.5119733377221857,0.49707867017774854,0.4546782422646478,0.3915610599078341,0.2739261026991442,0.0,0.018165734035549705,0.2408451283739302,0.3973625740618828,0.5240906846609612,0.6235804805793285,0.686677090190915,0.7439927583936801,0.7949720210664911,0.8462187294272547,0.8853480908492429,0.8971774193548387,0.9123395325872284,0.9153842988808426,0.9726999670836076,0.9453999341672152,0.9544930875576036,0.9484447004608295,0.9636068136932192,0.9666310072416063,0.9636068136932192,0.9639154048716261,0.9575378538512179,0.9575378538512179,0.9636068136932192,0.9696757735352205,0.9608706385780118,0.9544930875576036,0.9575378538512179,0.9575378538512179,0.9636068136932192,0.960562047399605,0.9575378538512179,0.9575378538512179,0.9578464450296248,0.9636068136932192,0.9636068136932192,0.960562047399605,0.8760885341074021,0.8675012094823416,0.8497822931785196,0.8583696178035801,0.8583696178035801,0.884978229317852,0.9115868408321238,0.9470851475568457,0.9293662312530238,0.9378930817610063,0.761066763425254,0.654874213836478,0.5664610546686019,0.548681664247702,0.4779874213836478,0.32746734397677796,0.212385099177552,0.11508224479922594,0.106192549588776,0.07069424286405418,0.08823173681664248,0.08847363328495404,0.08847363328495404,0.09730285437832607,0.07069424286405418,0.05297532656023222,0.0,0.05297532656023222,0.318577648766328,0.7347000483792937,0.8938679245283019,0.9204765360425737,0.9115868408321238,0.8497822931785196,0.7790880503144654,0.7080914368650217,0.8405902273826802,0.778785679729076,0.7699564586357039,0.8408925979680697,0.9115868408321238,0.9470851475568457,0.9470851475568457,0.9648645379777455,0.9556724721819061,0.9559748427672956,0.9733913884857281,1.0,0.9736937590711175,0.9733913884857281,0.9822810836961781,0.9825834542815675,0.9736937590711175,0.9648645379777455,0.9559748427672956,0.9559748427672956,0.9559748427672956,0.9736937590711175,0.9559748427672956,0.9556724721819061,0.9350689947751529,0.9335506631536641,0.9218059214933239,0.9284597865404367,0.9350689947751529,0.94685839324789,0.973429196623945,0.9749475282454338,0.980083061671058,1.0,0.743893180904747,0.693743580583218,0.5823248336533738,0.5026124235252087,0.44429062653507795,0.3461349528870629,0.24797927923904792,0.28120394766221585,0.2664671995712946,0.26789621756799,0.30112088599115794,0.29446702094404503,0.29964721118206583,0.27455008261510294,0.24945295404814005,0.20814540258116376,0.14982360559103292,0.0,0.0967266556513196,0.17639440896708794,0.28120394766221585,0.5756709686062609,0.758674585808065,0.8103425177510829,0.8553565846469879,0.8287857812709328,0.8568749162684768,0.868619657928817,0.8435671861742509,0.8900995846916447,0.940204528200777,0.94685839324789,0.9284597865404367,0.940204528200777,0.9218059214933239,0.9202875898718349,0.940204528200777,0.9417228598222659,0.9218059214933239,0.9284597865404367,0.9284597865404367,0.9417228598222659,0.9350689947751529,0.9350689947751529,0.9284597865404367,0.9202875898718349,0.9335506631536641,0.9284597865404367,0.9284597865404367,0.9218059214933239,0.5147524644329756,0.4998088528439966,0.48330193058627563,0.4718262745419295,0.4925111274951531,0.5634198956882663,0.7544919581660796,0.6680524835476912,0.7703981322192185,1.0,0.25658775019797386,0.2050735916550613,0.21557303186696158,0.23782802217307009,0.3077742279020234,0.2263728461811529,0.15198246907512084,0.1465757352338822,0.07280658638486115,0.06518118019715463,0.07471123126075203,0.03560115780563065,0.0,0.046735479642827885,0.052149040168209496,0.055958329919991265,0.07822014691024276,0.05691406570000819,0.06327653532126376,0.11382813140001638,0.1211395101171459,0.1837743371289697,0.22288441058409109,0.22765626280003276,0.33193386308402284,0.7481704486496819,0.4760042052374321,0.49346686327517,0.373289915622184,0.4530597198328828,0.5268288686819038,0.5007645886240135,0.44862920182409,0.4804347232462248,0.4419390513639715,0.4476734660440731,0.5306518118019715,0.5436907785150596,0.4225580950820567,0.44958493760410695,0.4718262745419295,0.47947898746620793,0.4689590672018787,0.4540154556128997,0.44862920182409,0.4476734660440731,0.45783839873296744,0.47087053876191254,0.45340788072417465,0.45054067338412385,
};


//VARIABLES THAT HAVE TO BE CHANGED MANUALLY: input tensor
int main() {
    // dimension of conv1d input, i.e if trained on (3, 80) dims then input_length = 80 and num_of_inputs = 3
    int num_of_channels = static_cast<int>(input.size()/channel_length);

    // each vector in the kernel represents the 2nd dimention of the input, i.e 3x3 kernel means the input shape is (x, 3), a 3x4 kernel means (x, 4 input)
    std::vector<std::vector<float>> conv1d_result = multi_filter_1Dconvolution(input, filters, conv_bias, channel_length, num_of_channels, stride, num_of_filters);

    // for (std::vector<float> vec : conv1d_result){
    //     std::cout << "{";
    //     for (float val : vec){
    //         std::cout << val << " ";
    //     }
    //     std::cout << "}\n";
    //     std::cout << std::endl;
    // }

    // std::cout << "convolution result ";
    // for (std::vector<float> single_filter_result : result){
    //     std::cout << "filter ";
    //     for (float value : single_filter_result) {
    //         std::cout << value << " ";
    // }
    // }
    
    //flatten
    //std::cout << conv1d_result.size() << "\n";
    std::vector<float> flat_result = flatten(conv1d_result);
    for (float f : flat_result){
        std::cout << f << " ";
    }

    //fully connected

    //std::cout << flat_result.size() << "\n";

    std::vector<float> fully_connected_result = fully_connected(flat_result, dense_weights, dense_bias);

    std::cout << fully_connected_result.size() << "\n";
    std::cout << "RESULT" << " ";
    for (float f : fully_connected_result){
        std::cout << f << " ";
    }

    std::cout << std::endl;

    return 0;
}